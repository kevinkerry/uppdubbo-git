package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Profitctrl;
import com.csii.upp.dto.generate.ProfitctrlExample;

public class ProfitctrlDAO extends BasePayDAO {
	/**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static int countByExample(ProfitctrlExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("PROFITCTRL.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static int deleteByExample(ProfitctrlExample example) throws SQLException {
        int rows = getSqlMap().delete("PROFITCTRL.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String profitseqnbr) throws SQLException {
        Profitctrl _key = new Profitctrl();
        _key.setProfitseqnbr(profitseqnbr);
        int rows = getSqlMap().delete("PROFITCTRL.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static void insert(Profitctrl record) throws SQLException {
        getSqlMap().insert("PROFITCTRL.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static void insertSelective(Profitctrl record) throws SQLException {
        getSqlMap().insert("PROFITCTRL.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Profitctrl> selectByExample(ProfitctrlExample example) throws SQLException {
        List<Profitctrl> list = getSqlMap().queryForList("PROFITCTRL.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static Profitctrl selectByPrimaryKey(String profitseqnbr) throws SQLException {
        Profitctrl _key = new Profitctrl();
        _key.setProfitseqnbr(profitseqnbr);
        Profitctrl record = (Profitctrl) getSqlMap().queryForObject("PROFITCTRL.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Profitctrl record, ProfitctrlExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("PROFITCTRL.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static int updateByExample(Profitctrl record, ProfitctrlExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("PROFITCTRL.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Profitctrl record) throws SQLException {
        int rows = getSqlMap().update("PROFITCTRL.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Profitctrl record) throws SQLException {
        int rows = getSqlMap().update("PROFITCTRL.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PROFITCTRL
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends ProfitctrlExample {
        private Object record;

        public UpdateByExampleParms(Object record, ProfitctrlExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}