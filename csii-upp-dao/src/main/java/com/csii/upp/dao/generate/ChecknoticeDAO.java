package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Checknotice;
import com.csii.upp.dto.generate.ChecknoticeExample;

public class ChecknoticeDAO extends BasePayDAO {
	/**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static int countByExample(ChecknoticeExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("CHECKNOTICE.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static int deleteByExample(ChecknoticeExample example) throws SQLException {
        int rows = getSqlMap().delete("CHECKNOTICE.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String checknoticenbr) throws SQLException {
        Checknotice _key = new Checknotice();
        _key.setChecknoticenbr(checknoticenbr);
        int rows = getSqlMap().delete("CHECKNOTICE.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static void insert(Checknotice record) throws SQLException {
        getSqlMap().insert("CHECKNOTICE.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static void insertSelective(Checknotice record) throws SQLException {
        getSqlMap().insert("CHECKNOTICE.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Checknotice> selectByExample(ChecknoticeExample example) throws SQLException {
        List<Checknotice> list = getSqlMap().queryForList("CHECKNOTICE.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static Checknotice selectByPrimaryKey(String checknoticenbr) throws SQLException {
        Checknotice _key = new Checknotice();
        _key.setChecknoticenbr(checknoticenbr);
        Checknotice record = (Checknotice) getSqlMap().queryForObject("CHECKNOTICE.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Checknotice record, ChecknoticeExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("CHECKNOTICE.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static int updateByExample(Checknotice record, ChecknoticeExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("CHECKNOTICE.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Checknotice record) throws SQLException {
        int rows = getSqlMap().update("CHECKNOTICE.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Checknotice record) throws SQLException {
        int rows = getSqlMap().update("CHECKNOTICE.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table CHECKNOTICE
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends ChecknoticeExample {
        private Object record;

        public UpdateByExampleParms(Object record, ChecknoticeExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}