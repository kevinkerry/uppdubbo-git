package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Certinfo;
import com.csii.upp.dto.generate.CertinfoExample;

public class CertinfoDAO extends BasePayDAO {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static int countByExample(CertinfoExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("CERTINFO.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static int deleteByExample(CertinfoExample example) throws SQLException {
        int rows = getSqlMap().delete("CERTINFO.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String certNbr, String certType) throws SQLException {
        Certinfo _key = new Certinfo();
        _key.setCertNbr(certNbr);
        _key.setCertType(certType);
        int rows = getSqlMap().delete("CERTINFO.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static void insert(Certinfo record) throws SQLException {
        getSqlMap().insert("CERTINFO.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static void insertSelective(Certinfo record) throws SQLException {
        getSqlMap().insert("CERTINFO.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Certinfo> selectByExample(CertinfoExample example) throws SQLException {
        List<Certinfo> list = getSqlMap().queryForList("CERTINFO.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static Certinfo selectByPrimaryKey(String certNbr, String certType) throws SQLException {
        Certinfo _key = new Certinfo();
        _key.setCertNbr(certNbr);
        _key.setCertType(certType);
        Certinfo record = (Certinfo) getSqlMap().queryForObject("CERTINFO.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Certinfo record, CertinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("CERTINFO.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static int updateByExample(Certinfo record, CertinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("CERTINFO.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Certinfo record) throws SQLException {
        int rows = getSqlMap().update("CERTINFO.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Certinfo record) throws SQLException {
        int rows = getSqlMap().update("CERTINFO.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table CERTINFO
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends CertinfoExample {
        private Object record;

        public UpdateByExampleParms(Object record, CertinfoExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}