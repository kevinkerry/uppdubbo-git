package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Merbaseinfo;
import com.csii.upp.dto.generate.MerbaseinfoExample;

public class MerbaseinfoDAO extends BasePayDAO {
	/**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static int countByExample(MerbaseinfoExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("MERBASEINFO.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static int deleteByExample(MerbaseinfoExample example) throws SQLException {
        int rows = getSqlMap().delete("MERBASEINFO.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String mernbr) throws SQLException {
        Merbaseinfo _key = new Merbaseinfo();
        _key.setMernbr(mernbr);
        int rows = getSqlMap().delete("MERBASEINFO.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static void insert(Merbaseinfo record) throws SQLException {
        getSqlMap().insert("MERBASEINFO.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static void insertSelective(Merbaseinfo record) throws SQLException {
        getSqlMap().insert("MERBASEINFO.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Merbaseinfo> selectByExample(MerbaseinfoExample example) throws SQLException {
        List<Merbaseinfo> list = getSqlMap().queryForList("MERBASEINFO.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static Merbaseinfo selectByPrimaryKey(String mernbr) throws SQLException {
        Merbaseinfo _key = new Merbaseinfo();
        _key.setMernbr(mernbr);
        Merbaseinfo record = (Merbaseinfo) getSqlMap().queryForObject("MERBASEINFO.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Merbaseinfo record, MerbaseinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("MERBASEINFO.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static int updateByExample(Merbaseinfo record, MerbaseinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("MERBASEINFO.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Merbaseinfo record) throws SQLException {
        int rows = getSqlMap().update("MERBASEINFO.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Merbaseinfo record) throws SQLException {
        int rows = getSqlMap().update("MERBASEINFO.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table MERBASEINFO
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends MerbaseinfoExample {
        private Object record;

        public UpdateByExampleParms(Object record, MerbaseinfoExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}