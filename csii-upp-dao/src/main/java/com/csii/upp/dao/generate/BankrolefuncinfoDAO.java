package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Bankrolefuncinfo;
import com.csii.upp.dto.generate.BankrolefuncinfoExample;

public class BankrolefuncinfoDAO extends BasePayDAO {
	  /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static int countByExample(BankrolefuncinfoExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("BANKROLEFUNCINFO.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static int deleteByExample(BankrolefuncinfoExample example) throws SQLException {
        int rows = getSqlMap().delete("BANKROLEFUNCINFO.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String funcnbr) throws SQLException {
        Bankrolefuncinfo _key = new Bankrolefuncinfo();
        _key.setFuncnbr(funcnbr);
        int rows = getSqlMap().delete("BANKROLEFUNCINFO.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static void insert(Bankrolefuncinfo record) throws SQLException {
        getSqlMap().insert("BANKROLEFUNCINFO.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static void insertSelective(Bankrolefuncinfo record) throws SQLException {
        getSqlMap().insert("BANKROLEFUNCINFO.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Bankrolefuncinfo> selectByExample(BankrolefuncinfoExample example) throws SQLException {
        List<Bankrolefuncinfo> list = getSqlMap().queryForList("BANKROLEFUNCINFO.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static Bankrolefuncinfo selectByPrimaryKey(String funcnbr) throws SQLException {
        Bankrolefuncinfo _key = new Bankrolefuncinfo();
        _key.setFuncnbr(funcnbr);
        Bankrolefuncinfo record = (Bankrolefuncinfo) getSqlMap().queryForObject("BANKROLEFUNCINFO.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Bankrolefuncinfo record, BankrolefuncinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("BANKROLEFUNCINFO.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static int updateByExample(Bankrolefuncinfo record, BankrolefuncinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("BANKROLEFUNCINFO.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Bankrolefuncinfo record) throws SQLException {
        int rows = getSqlMap().update("BANKROLEFUNCINFO.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Bankrolefuncinfo record) throws SQLException {
        int rows = getSqlMap().update("BANKROLEFUNCINFO.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table BANKROLEFUNCINFO
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends BankrolefuncinfoExample {
        private Object record;

        public UpdateByExampleParms(Object record, BankrolefuncinfoExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}