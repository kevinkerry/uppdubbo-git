package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Test;
import com.csii.upp.dto.generate.TestExample;
import com.csii.upp.supportor.IDGenerateFactory;
import com.csii.upp.util.StringUtil;

public class TestDAO extends BasePayDAO {
	/**生产测试
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static int countByExample(TestExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("Test.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static int deleteByExample(TestExample example) throws SQLException {
        int rows = getSqlMap().delete("Test.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String transseqnbr) throws SQLException {
        Test _key = new Test();
        _key.setTransseqnbr(transseqnbr);
        int rows = getSqlMap().delete("Test.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static void insert(Test record) throws SQLException {
    	if(StringUtil.isStringEmpty(record.getTransseqnbr())){
        	record.setTransseqnbr(IDGenerateFactory.generateSeqId());
    	}
        getSqlMap().insert("Test.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static void insertSelective(Test record) throws SQLException {
    	if(StringUtil.isStringEmpty(record.getTransseqnbr())){
        	record.setTransseqnbr(IDGenerateFactory.generateSeqId());
    	}
        getSqlMap().insert("Test.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Test> selectByExample(TestExample example) throws SQLException {
        List<Test> list = getSqlMap().queryForList("Test.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static Test selectByPrimaryKey(String transseqnbr) throws SQLException {
        Test _key = new Test();
        _key.setTransseqnbr(transseqnbr);
        Test record = (Test) getSqlMap().queryForObject("Test.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Test record, TestExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("Test.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static int updateByExample(Test record, TestExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("Test.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Test record) throws SQLException {
        int rows = getSqlMap().update("Test.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table Test
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Test record) throws SQLException {
        int rows = getSqlMap().update("Test.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table Test
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends TestExample {
        private Object record;

        public UpdateByExampleParms(Object record, TestExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}