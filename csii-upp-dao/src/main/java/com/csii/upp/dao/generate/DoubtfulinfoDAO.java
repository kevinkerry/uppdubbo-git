package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Doubtfulinfo;
import com.csii.upp.dto.generate.DoubtfulinfoExample;

public class DoubtfulinfoDAO extends BasePayDAO {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static int countByExample(DoubtfulinfoExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("DOUBTFULINFO.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static int deleteByExample(DoubtfulinfoExample example) throws SQLException {
        int rows = getSqlMap().delete("DOUBTFULINFO.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String mernbr, String merseqnbr) throws SQLException {
        Doubtfulinfo _key = new Doubtfulinfo();
        _key.setMernbr(mernbr);
        _key.setMerseqnbr(merseqnbr);
        int rows = getSqlMap().delete("DOUBTFULINFO.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static void insert(Doubtfulinfo record) throws SQLException {
        getSqlMap().insert("DOUBTFULINFO.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static void insertSelective(Doubtfulinfo record) throws SQLException {
        getSqlMap().insert("DOUBTFULINFO.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Doubtfulinfo> selectByExample(DoubtfulinfoExample example) throws SQLException {
        List<Doubtfulinfo> list = getSqlMap().queryForList("DOUBTFULINFO.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static Doubtfulinfo selectByPrimaryKey(String mernbr, String merseqnbr) throws SQLException {
        Doubtfulinfo _key = new Doubtfulinfo();
        _key.setMernbr(mernbr);
        _key.setMerseqnbr(merseqnbr);
        Doubtfulinfo record = (Doubtfulinfo) getSqlMap().queryForObject("DOUBTFULINFO.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Doubtfulinfo record, DoubtfulinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("DOUBTFULINFO.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static int updateByExample(Doubtfulinfo record, DoubtfulinfoExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("DOUBTFULINFO.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Doubtfulinfo record) throws SQLException {
        int rows = getSqlMap().update("DOUBTFULINFO.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Doubtfulinfo record) throws SQLException {
        int rows = getSqlMap().update("DOUBTFULINFO.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table DOUBTFULINFO
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends DoubtfulinfoExample {
        private Object record;

        public UpdateByExampleParms(Object record, DoubtfulinfoExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}