package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Batchfeeprofittranshist;
import com.csii.upp.dto.generate.BatchfeeprofittranshistExample;

public class BatchfeeprofittranshistDAO extends BasePayDAO {
	 /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static int countByExample(BatchfeeprofittranshistExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("BATCHFEEPROFITTRANSHIST.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static int deleteByExample(BatchfeeprofittranshistExample example) throws SQLException {
        int rows = getSqlMap().delete("BATCHFEEPROFITTRANSHIST.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String profitcleartransnbr) throws SQLException {
        Batchfeeprofittranshist _key = new Batchfeeprofittranshist();
        _key.setProfitcleartransnbr(profitcleartransnbr);
        int rows = getSqlMap().delete("BATCHFEEPROFITTRANSHIST.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static void insert(Batchfeeprofittranshist record) throws SQLException {
        getSqlMap().insert("BATCHFEEPROFITTRANSHIST.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static void insertSelective(Batchfeeprofittranshist record) throws SQLException {
        getSqlMap().insert("BATCHFEEPROFITTRANSHIST.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Batchfeeprofittranshist> selectByExample(BatchfeeprofittranshistExample example) throws SQLException {
        List<Batchfeeprofittranshist> list = getSqlMap().queryForList("BATCHFEEPROFITTRANSHIST.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static Batchfeeprofittranshist selectByPrimaryKey(String profitcleartransnbr) throws SQLException {
        Batchfeeprofittranshist _key = new Batchfeeprofittranshist();
        _key.setProfitcleartransnbr(profitcleartransnbr);
        Batchfeeprofittranshist record = (Batchfeeprofittranshist) getSqlMap().queryForObject("BATCHFEEPROFITTRANSHIST.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Batchfeeprofittranshist record, BatchfeeprofittranshistExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("BATCHFEEPROFITTRANSHIST.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static int updateByExample(Batchfeeprofittranshist record, BatchfeeprofittranshistExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("BATCHFEEPROFITTRANSHIST.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Batchfeeprofittranshist record) throws SQLException {
        int rows = getSqlMap().update("BATCHFEEPROFITTRANSHIST.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Batchfeeprofittranshist record) throws SQLException {
        int rows = getSqlMap().update("BATCHFEEPROFITTRANSHIST.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table BATCHFEEPROFITTRANSHIST
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends BatchfeeprofittranshistExample {
        private Object record;

        public UpdateByExampleParms(Object record, BatchfeeprofittranshistExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}