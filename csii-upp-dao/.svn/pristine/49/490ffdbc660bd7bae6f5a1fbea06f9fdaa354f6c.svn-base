package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Authority;
import com.csii.upp.dto.generate.AuthorityExample;

public class AuthorityDAO extends BasePayDAO {

    public static int countByExample(AuthorityExample example) throws SQLException {
    	
        Integer count = (Integer)  getSqlMap().queryForObject("AUTHORITY.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static int deleteByExample(AuthorityExample example) throws SQLException {
        int rows = getSqlMap().delete("AUTHORITY.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String rtxnseq) throws SQLException {
        Authority _key = new Authority();
        _key.setRtxnseq(rtxnseq);
        int rows = getSqlMap().delete("AUTHORITY.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static void insert(Authority record) throws SQLException {
        getSqlMap().insert("AUTHORITY.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static void insertSelective(Authority record) throws SQLException {
        getSqlMap().insert("AUTHORITY.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Authority> selectByExample(AuthorityExample example) throws SQLException {
        List<Authority> list = getSqlMap().queryForList("AUTHORITY.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static Authority selectByPrimaryKey(String rtxnseq) throws SQLException {
        Authority _key = new Authority();
        _key.setRtxnseq(rtxnseq);
        Authority record = (Authority) getSqlMap().queryForObject("AUTHORITY.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Authority record, AuthorityExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("AUTHORITY.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static int updateByExample(Authority record, AuthorityExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("AUTHORITY.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Authority record) throws SQLException {
        int rows = getSqlMap().update("AUTHORITY.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Authority record) throws SQLException {
        int rows = getSqlMap().update("AUTHORITY.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table AUTHORITY
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends AuthorityExample {
        private Object record;

        public UpdateByExampleParms(Object record, AuthorityExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}