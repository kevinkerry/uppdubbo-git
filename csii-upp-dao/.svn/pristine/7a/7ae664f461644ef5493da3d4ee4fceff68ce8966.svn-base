package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Transexceptionreg;
import com.csii.upp.dto.generate.TransexceptionregExample;

public class TransexceptionregDAO extends BasePayDAO {
	/**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static int countByExample(TransexceptionregExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("TRANSEXCEPTIONREG.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static int deleteByExample(TransexceptionregExample example) throws SQLException {
        int rows = getSqlMap().delete("TRANSEXCEPTIONREG.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String expseqnbr) throws SQLException {
        Transexceptionreg _key = new Transexceptionreg();
        _key.setExpseqnbr(expseqnbr);
        int rows = getSqlMap().delete("TRANSEXCEPTIONREG.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static void insert(Transexceptionreg record) throws SQLException {
        getSqlMap().insert("TRANSEXCEPTIONREG.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static void insertSelective(Transexceptionreg record) throws SQLException {
        getSqlMap().insert("TRANSEXCEPTIONREG.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Transexceptionreg> selectByExample(TransexceptionregExample example) throws SQLException {
        List<Transexceptionreg> list = getSqlMap().queryForList("TRANSEXCEPTIONREG.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static Transexceptionreg selectByPrimaryKey(String expseqnbr) throws SQLException {
        Transexceptionreg _key = new Transexceptionreg();
        _key.setExpseqnbr(expseqnbr);
        Transexceptionreg record = (Transexceptionreg) getSqlMap().queryForObject("TRANSEXCEPTIONREG.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Transexceptionreg record, TransexceptionregExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("TRANSEXCEPTIONREG.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static int updateByExample(Transexceptionreg record, TransexceptionregExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("TRANSEXCEPTIONREG.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Transexceptionreg record) throws SQLException {
        int rows = getSqlMap().update("TRANSEXCEPTIONREG.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Transexceptionreg record) throws SQLException {
        int rows = getSqlMap().update("TRANSEXCEPTIONREG.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table TRANSEXCEPTIONREG
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends TransexceptionregExample {
        private Object record;

        public UpdateByExampleParms(Object record, TransexceptionregExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}