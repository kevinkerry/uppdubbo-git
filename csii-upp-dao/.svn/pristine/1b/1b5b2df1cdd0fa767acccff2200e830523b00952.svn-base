package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Batchmersettle;
import com.csii.upp.dto.generate.BatchmersettleExample;

public class BatchmersettleDAO extends BasePayDAO {
	 /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static int countByExample(BatchmersettleExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("BATCHMERSETTLE.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static int deleteByExample(BatchmersettleExample example) throws SQLException {
        int rows = getSqlMap().delete("BATCHMERSETTLE.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String settleseqnbr) throws SQLException {
        Batchmersettle _key = new Batchmersettle();
        _key.setSettleseqnbr(settleseqnbr);
        int rows = getSqlMap().delete("BATCHMERSETTLE.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static void insert(Batchmersettle record) throws SQLException {
        getSqlMap().insert("BATCHMERSETTLE.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static void insertSelective(Batchmersettle record) throws SQLException {
        getSqlMap().insert("BATCHMERSETTLE.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Batchmersettle> selectByExample(BatchmersettleExample example) throws SQLException {
        List<Batchmersettle> list = getSqlMap().queryForList("BATCHMERSETTLE.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static Batchmersettle selectByPrimaryKey(String settleseqnbr) throws SQLException {
        Batchmersettle _key = new Batchmersettle();
        _key.setSettleseqnbr(settleseqnbr);
        Batchmersettle record = (Batchmersettle) getSqlMap().queryForObject("BATCHMERSETTLE.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Batchmersettle record, BatchmersettleExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("BATCHMERSETTLE.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static int updateByExample(Batchmersettle record, BatchmersettleExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("BATCHMERSETTLE.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Batchmersettle record) throws SQLException {
        int rows = getSqlMap().update("BATCHMERSETTLE.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Batchmersettle record) throws SQLException {
        int rows = getSqlMap().update("BATCHMERSETTLE.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table BATCHMERSETTLE
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends BatchmersettleExample {
        private Object record;

        public UpdateByExampleParms(Object record, BatchmersettleExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}