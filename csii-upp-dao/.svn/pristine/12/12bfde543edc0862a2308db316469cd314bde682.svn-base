package com.csii.upp.dao.generate;

import java.sql.SQLException;
import java.util.List;

import com.csii.upp.dao.BasePayDAO;
import com.csii.upp.dto.generate.Checkapply;
import com.csii.upp.dto.generate.CheckapplyExample;

public class CheckapplyDAO extends BasePayDAO {
	/**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static int countByExample(CheckapplyExample example) throws SQLException {
        Integer count = (Integer)  getSqlMap().queryForObject("CHECKAPPLY.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static int deleteByExample(CheckapplyExample example) throws SQLException {
        int rows = getSqlMap().delete("CHECKAPPLY.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static int deleteByPrimaryKey(String checkapplynbr) throws SQLException {
        Checkapply _key = new Checkapply();
        _key.setCheckapplynbr(checkapplynbr);
        int rows = getSqlMap().delete("CHECKAPPLY.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static void insert(Checkapply record) throws SQLException {
        getSqlMap().insert("CHECKAPPLY.insert", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static void insertSelective(Checkapply record) throws SQLException {
        getSqlMap().insert("CHECKAPPLY.insertSelective", record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    @SuppressWarnings("unchecked")
    public static List<Checkapply> selectByExample(CheckapplyExample example) throws SQLException {
        List<Checkapply> list = getSqlMap().queryForList("CHECKAPPLY.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static Checkapply selectByPrimaryKey(String checkapplynbr) throws SQLException {
        Checkapply _key = new Checkapply();
        _key.setCheckapplynbr(checkapplynbr);
        Checkapply record = (Checkapply) getSqlMap().queryForObject("CHECKAPPLY.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static int updateByExampleSelective(Checkapply record, CheckapplyExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("CHECKAPPLY.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static int updateByExample(Checkapply record, CheckapplyExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMap().update("CHECKAPPLY.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKeySelective(Checkapply record) throws SQLException {
        int rows = getSqlMap().update("CHECKAPPLY.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    public static int updateByPrimaryKey(Checkapply record) throws SQLException {
        int rows = getSqlMap().update("CHECKAPPLY.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table CHECKAPPLY
     *
     * @mbggenerated
     */
    protected static class UpdateByExampleParms extends CheckapplyExample {
        private Object record;

        public UpdateByExampleParms(Object record, CheckapplyExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}